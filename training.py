import argparse
import pdb
import sys
import numpy as np
from grakel import ShortestPath
from ocsvm_training.mad_knn import MAD_KNN
from ocsvm_training.qms import QMS2
from sklearn.svm import OneClassSVM as OCSVM
import joblib
from pyichem import ints
import matplotlib.pyplot as plt


def qms2_training(graphs, kernel, model_name, kernel_name):
	report = ['Training using QMS2 method']
	trainer_qms2 = QMS2(graphs, kernel)
	sensibility = 1
	report.append(f'Kneedle algorithm sensibility: {sensibility}')
	while sensibility != -1:
		report[-1] = f'Kneedle algorithm sensibility: {sensibility}'
		fitted_graphs = trainer_qms2.fit(find_n = True, direction = 'increasing', curve = 'concave', S_knee = sensibility)
		sensibility = input(f'Please insert the new sensibility value (current sensibility: {sensibility}).\nSensibility is an integer value.\n If the correct knee has been selected please set the sensibility to -1.\n')
		sensibility = int(sensibility)
	ghram_matrix = kernel.fit_transform(fitted_graphs)
	report.append(f'Graphs selected for model training: {len(fitted_graphs)}/{len(graphs)}')

	ocsvm_qms2 = OCSVM( kernel = 'precomputed', nu = 0.01)

	ocsvm_qms2.fit(ghram_matrix)
	report.append(f'Size of the support vector: {ocsvm_qms2.n_support_[0]}')
	plt.hist(ocsvm_qms2.decision_function(ghram_matrix), bins = 100)
	plt.show()

	report.append(f'Kernel saved as: {kernel_name}\nModel saved as: {model_name}\n')

	joblib.dump(ocsvm_qms2, model_name)
	joblib.dump(kernel, kernel_name)

	return report

def mad_training(graphs, kernel, model_name, kernel_name):
	report = ['Training using MAD-KNN method']
	trainer_mad = MAD_KNN(graphs, kernel)

	trainer_mad.fit(find_n = True)
	report.append(f'Calculated nu value: {trainer_mad.nu}')

	ocsvm_mad = OCSVM( kernel = 'precomputed', nu = trainer_mad.nu)
	ocsvm_mad.fit(trainer_mad.dist)
	report.append(f'Size of the support vector: {ocsvm_mad.n_support_[0]}')
	plt.hist(ocsvm_mad.decision_function(trainer_mad.dist), bins = 100)
	plt.show()

	report.append(f'Kernel saved as: {kernel_name}\nModel saved as: {model_name}\n')

	joblib.dump(ocsvm_mad, model_name)
	joblib.dump(trainer_mad.kernel, kernel_name)

	return report


def main(args):
	
	graphs = list()
	report = list()
	report.append('Report of the training:')

	print('Generating interaction graphs from IPAs')

	for i, file in enumerate(args.file):
		interactions = ints.Ints([], [], type_int = args.type)
		interactions.read_map_file(file)
		if args.folder is not None:
			interactions.output_location = [args.folder[i]+loc for loc in interactions.output_location]
		graphs.append(interactions.compute_graphs(subgraph = args.subgraph))

	g = np.concatenate(graphs)
	#pdb.set_trace()
	ng = np.array([gt.n for gt in g])
	mask = ng >2
	g = g[mask]

	print('Interaction graphs generated')

	report.append(f'Generated graphs for model training: {len(g)}')

	base_kernel = ShortestPath(normalize = args.normalize)
	report.append(f'Selected graph kernel: ShortestPath\nNormalized kernel: {args.normalize}\n')

	if args.qms2:
		print('Training using QMS2')
		report_qms2 = qms2_training(g, base_kernel, args.qms2_model, args.qms2_kernel)
		print('Training completed')

		report = report + report_qms2

	if args.mad:
		print('Training using MAD-KNN')
		report_mad = mad_training(g, base_kernel, args.mad_model, args.mad_kernel)
		print('Training completed')
		report = report + report_mad

	with open(args.report, 'w') as rep:
		rep.writelines('\n'.join(report))


if __name__ == "__main__":
	parser=argparse.ArgumentParser()
	parser.add_argument('-f', '--file', nargs = '+', help='Map file generated by a script calculating the interactions', required = True)
	parser.add_argument('-fo', '--folder', nargs = '+', default = None, help='Folder conatining the interaction files')
	parser.add_argument('-t', '--type', default = 'MERG', help='Type of interactions used in interaction detection.\navailble types: MERG, CENT, LIG, PROT')
	parser.add_argument('-sg', '--subgraph', default = None, help='Available subgraph types: CENT, LIG, PROT, ELEC')
	parser.add_argument('-nn', '--normalize', default =  True, help = 'Remove normalization of the graph similairty score' , action = 'store_false')
	parser.add_argument('-m', '--mad', default = True, help = 'Skip training using the MAD heuristic', action = 'store_false')
	parser.add_argument('-q', '--qms2', default = True, help = 'Skip training using the QMS2 heuristic', action = 'store_false')
	parser.add_argument('-mk', '--mad_kernel', default = 'mad_kernel.sav', help = 'Name of the MAD trained kernel')
	parser.add_argument('-mm', '--mad_model', default = 'mad_ocsvm.sav', help = 'Name of the MAD trained model')
	parser.add_argument('-qk', '--qms2_kernel', default = 'qms2_kernel.sav', help = 'Name of the QMS2 trained kernel')
	parser.add_argument('-qm', '--qms2_model', default = 'qms2_ocsvm.sav', help = 'Name of the QMS2 trained model')
	parser.add_argument('-r', '--report', default = 'training_report.txt', help = 'Name of the report file')

	parser.set_defaults(func=main)
	args=parser.parse_args()
	status = args.func(args)
	sys.exit(status)