import argparse
import sys
import pdb
import numpy as np
from pyichem import ints
from grakel import ShortestPath
from sklearn.svm import OneClassSVM as OCSVM
import joblib
import matplotlib.pyplot as plt
import pandas as pd

def main(args):
	
	graphs = list()
	report = list()

	print('Generating interaction graphs from IPAs')

	interactions = ints.Ints([], [], type_int = args.type)
	interactions.read_map_file(args.file)
	if args.folder is not None:
		interactions.output_location = [args.folder+loc for loc in interactions.output_location]
	graphs.append(interactions.compute_graphs(subgraph = args.subgraph))

	g = np.concatenate(graphs)
	ng = np.array([gt.n for gt in g])
	mask = ng > 2
	g = g[mask]


	print('Interaction graphs generated')
	report.append(f'Interaction graphs generated for rescoring: {len(g)}\n')

	for i, (kernel_file, model_file) in enumerate(zip(args.kernel, args.model)):
		print(f'Rescoring using {kernel_file} and {model_file}')
		report.append(f'Rescoring using {kernel_file} and {model_file}')
		kernel = joblib.load(kernel_file)
		model = joblib.load(model_file)

		dist = kernel.transform(g)
		dist[np.isnan(dist)] = 0
		scores = model.decision_function(dist)
		scores_tmp = np.full(len(mask), np.nan)
		scores_tmp[mask]=scores

		report.append(f'Docking poses selected: {len(scores[scores >= 0])} / {len(g)}\n')

		results_dict = {'Protein structure': interactions.receptor_mol2, 'Ligand pose': interactions.ligand_mol2, 'Score': scores_tmp}
		print('Saving results ...')

		pd.DataFrame.from_dict(results_dict).to_csv(f'MD_rescoring_{i}.csv')

	with open(args.report, 'w') as rep:
		rep.writelines('\n'.join(report))
	print('Calculations completed')


if __name__ == "__main__":
	parser=argparse.ArgumentParser()
	parser.add_argument('-m', '--model', nargs = '+', help = 'Model(s) used for pose rescoring', required = True)
	parser.add_argument('-k', '--kernel', nargs = '+', help = 'Kernel(s) used for Gram matrix dertermination', required = True)
	parser.add_argument('-f', '--file', help='Inuput map file generated by a script calculating the interactions', required = True)
	parser.add_argument('-fo', '--folder', default = None, help='folder conatining the interaction files')
	parser.add_argument('-t', '--type', default = 'MERG', help='type of interactions used in interaction detection.\navailble types: MERG, CENT, LIG, PROT')
	parser.add_argument('-sg', '--subgraph', default = None, help='Available subgraph types: CENT, LIG, PROT, ELEC')
	parser.add_argument('-r', '--report', default = 'rescoring_report.txt', help = 'Report file name')

	parser.set_defaults(func=main)
	args=parser.parse_args()
	status = args.func(args)
	sys.exit(status)